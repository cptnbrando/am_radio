plugins {
	id 'org.springframework.boot' version '2.5.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'

	// added angular for spring
	id "com.github.node-gradle.node" version "3.1.0"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11

//tasks.bootRun {
//	args("--spring.profiles.active=${profile}")
//}
//
//tasks.processResources {
//	rename("application-${profile}.properties", "application.properties")
//}

// Extensions or Variables to use throughout the build.gradle
ext {
	angularAppName = "amradio"
	angularDir = "$projectDir/angular"
	profile = System.getenv("SPRING_PROFILES_ACTIVE")
}

node {
	nodeProjectDir = file(angularDir)
	download = true
	version = '16.4.0'
	npmVersion = '7.19.1'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

//	runtimeOnly("org.postgresql:postgresql")
//	runtimeOnly("com.h2database:h2")

	// Database from profile, h2 for dev postgresql for prod
	if (System.getenv("SPRING_PROFILES_ACTIVE") == "prod") {
		runtimeOnly("org.postgresql:postgresql")
	} else {
		runtimeOnly("com.h2database:h2")
	}

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// https://mvnrepository.com/artifact/se.michaelthelin.spotify/spotify-web-api-java
	implementation group: 'se.michaelthelin.spotify', name: 'spotify-web-api-java', version: '6.5.4'
}

test {
	useJUnitPlatform()
}

task compileAngular(type: NpmTask, dependsOn: npmInstall) {
	def inputFiles = project.fileTree(dir: "${angularDir}", exclude: "**/karma-test-results.xml")
	inputs.files(inputFiles)

	def outputFile = "${angularDir}/dist/${angularAppName}" as Object
	outputs.dir outputFile

	def buildCmd
	if (System.getenv("SPRING_PROFILES_ACTIVE") == "prod") {
		buildCmd = "buildProd"
	}
	else {
		buildCmd = "buildDev"
	}

	group "build"
	description = 'Compile client side assets for production'
	args = ['run', "${buildCmd}"]
}

task copyAngular(type: Copy, dependsOn: compileAngular) {
	def inputFiles = project.fileTree(dir: "${angularDir}/dist/${angularAppName}")
	inputs.files(inputFiles)

	def outputFile = "${projectDir}/src/main/resources/static/" as Object
	outputs.dir outputFile

	from "${angularDir}/dist/${angularAppName}"
	into "${projectDir}/src/main/resources/static"
}

tasks.processResources.dependsOn(copyAngular)
